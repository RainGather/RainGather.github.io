<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DIY简单的温度报警器</title>
    <url>/2017/12/17/2017-12-17-DIY%E7%AE%80%E5%8D%95%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%8A%A5%E8%AD%A6%E5%99%A8/</url>
    <content><![CDATA[<p>机房空调挂了，室内温度飙升，差点把设备烧毁。</p>
<iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=w0335igaejs&tiny=0&auto=0" allowfullscreen></iframe>

<p>所以制作了这个设备，温度超标时自动会发送警报到手机微信端。</p>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>用来检测室内温度，一旦超过设置温度，就报警发送email，可以在手机端接收警报。</p>
<h1 id="所需设备"><a href="#所需设备" class="headerlink" title="所需设备"></a>所需设备</h1><p>以下设备是作者所购的型号和地址，有些相似设备或不同淘宝店购买的设备可能也可以兼容，但也有可能需要做一些修改才可以正常使用。如果你是新手，推荐购买和作者一样的设备，来保证最优兼容性。</p>
<ul>
<li><p>1 x 树莓派3代B型 Raspberry Pi Model 3 B</p>
<p><a href="https://detail.tmall.com/item.htm?id=527595656123&amp;spm=a1z09.2.0.0.cXUn6z&amp;_u=l3509pv587b">https://detail.tmall.com/item.htm?id=527595656123&amp;spm=a1z09.2.0.0.cXUn6z&amp;_u=l3509pv587b</a></p>
</li>
<li><p>2 x 树莓派散热片</p>
<p><a href="https://detail.tmall.com/item.htm?id=44626559422&amp;spm=a1z09.2.0.0.cXUn6z&amp;_u=l3509pv996a">https://detail.tmall.com/item.htm?id=44626559422&amp;spm=a1z09.2.0.0.cXUn6z&amp;_u=l3509pv996a</a></p>
</li>
<li><p>2 x DHT11 温湿度传感器 (抱歉，虽然1片就可以了，但是被我代码写死了两片。。暂时懒得改。。)</p>
<p><a href="https://detail.tmall.com/item.htm?id=41248630584&amp;ali_refid=a3_430583_1006:1109983619:N:DHT11:f42e6410295417d5b6e7b061f4b0d8ce&amp;ali_trackid=1_f42e6410295417d5b6e7b061f4b0d8ce&amp;spm=a230r.1.14.1.8WCr34">https://detail.tmall.com/item.htm?id=41248630584&amp;ali_refid=a3_430583_1006:1109983619:N:DHT11:f42e6410295417d5b6e7b061f4b0d8ce&amp;ali_trackid=1_f42e6410295417d5b6e7b061f4b0d8ce&amp;spm=a230r.1.14.1.8WCr34</a></p>
</li>
<li><p>诺干杜邦线 (母头对母头)</p>
<p><a href="https://item.taobao.com/item.htm?spm=a1z10.3-c.w4002-10831283312.16.I525lp&amp;id=27288768846">https://item.taobao.com/item.htm?spm=a1z10.3-c.w4002-10831283312.16.I525lp&amp;id=27288768846</a></p>
</li>
<li><p>一张4G以上的TF卡 (Mini SD卡，淘宝随便找下)</p>
</li>
<li><p>一个支持HDMI输入的显示设备</p>
</li>
<li><p>一根HDMI双公头线</p>
</li>
<li><p>USB鼠标和键盘</p>
</li>
<li><p>一根Android手机通用充电线</p>
</li>
</ul>
<h1 id="安装树莓派系统"><a href="#安装树莓派系统" class="headerlink" title="安装树莓派系统"></a>安装树莓派系统</h1><p>在树莓派官网下载树莓派的系统镜像(下载Full desktop image based的)： <a href="https://www.raspberrypi.org/downloads/raspbian/">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<p>下载镜像烧入工具win32diskimager： <a href="https://sourceforge.net/projects/win32diskimager/">https://sourceforge.net/projects/win32diskimager/</a></p>
<p>用读卡器接上格式化成FAT32的TF卡，并用win32diskimager将系统镜像烧入到该卡中。</p>
<p>完成后，将树莓派接上HDMI显示器、USB键盘鼠标和电源线，电源可以用Android手机充电器供电，也可以用电视机、电脑上的USB口供电。</p>
<p>接上电源后查看HDMI显示器，如稍后出现开机画面则说明一切已准备就绪。</p>
<h1 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h1><p>将树莓派关机并拔掉电源</p>
<p>这里有树莓派的针脚说明图（方向是将树莓派拿手上，针脚排靠右上方）： <a href="https://coding.net/u/raingather/p/temp_monitor/git/blob/release/GPIO_Pi2_e14.png">https://coding.net/u/raingather/p/temp_monitor/git/blob/release/GPIO_Pi2_e14.png</a></p>
<p>图中，3.3V和5V的意思就是正极3.3V和5V，Ground的意思是负极（接地），其余类似GPIO02, GPIO15之类的针脚，是信号针脚，GPIO之后的数字意思是针脚号码。</p>
<p>将DHT11的温湿度传感器的正极接在随意一个3.3V针脚上，负极接在随意一个Ground针脚上。两个都接好。之后分别将两个DHT11温湿度传感器的数据线接在某个GPIO的针脚，记下两个针脚的号码。我接的是GPIO2和GPIO10。</p>
<p>接通电源前一定要反复确认没有接错针脚，有时候电压过高、短路、正负极接错等会导致传感器或设备烧毁甚至短路燃烧。</p>
<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><ol>
<li>注册一个Email，推荐163的。注册好后在设置里开通POP3和SMTP服务，有些邮箱开通服务后，会有一个（或让你设置一个）独立的密码，记住这个密码，待会儿要用。如果没有独立密码那就是邮箱的登陆密码。</li>
<li>接通树莓派电源，进入桌面后打开命令行窗口，在里面输入：</li>
</ol>
<blockquote>
<p>  如果你在国内：</p>
<p>  git clone <a href="https://git.coding.net/raingather/temp_monitor.git">https://git.coding.net/raingather/temp_monitor.git</a></p>
<p>  如果你在国外：</p>
<p>  git clone <a href="https://github.com/scaldstack/temp_monitor.git">https://github.com/scaldstack/temp_monitor.git</a></p>
</blockquote>
<ol>
<li>修改配置文件： 用文件浏览器打开home目录下temp_monitor目录，会看见里面有很多文件。将temp_monitor.cfg.sample重命名成temp_monitor.cfg，然后按照里面的格式，修改成刚刚注册的邮箱(send_email)、SMTP服务器地址(smtp)、密码（passwd, 就是1.里面说的那个密码）、温湿度传感器的针脚号码(temp1_pin, temp2_pin)、警戒温度线(safe_temp)、以及自己用于接受警报的邮箱(recv_email, 推荐和微信绑定的QQ邮箱，这样可以在微信上收到推送)。</li>
<li>逐行输入：</li>
</ol>
<blockquote>
<p>  chmod +x temp_monitor&#x2F;install.sh</p>
<p>  sudo temp_monitor&#x2F;install.sh</p>
</blockquote>
<p>此时如果有跳出要你输入密码的情况，请输入密码（之前第一次开机可能会让你设置，就是当时设置的那个密码，密码在输入时，命令行窗口会没有任何反应，这是正常的。直接输完并按回车就好）</p>
<ol>
<li>输入：</li>
</ol>
<blockquote>
<p>  sudo reboot</p>
</blockquote>
<p>此时系统会重启，重启好后稍等一会儿，查看自己填写的recv_email邮箱是否有邮件到达。如有到达说明成功了。</p>
<ol>
<li>这里要注意把自己send_email的地址拉进白名单，否则以后发送过来的email会被识别成垃圾邮件丢弃。</li>
<li>在手机端添加邮箱，大部分手机都有自带的邮箱客户端，如果没有，可以用QQ的邮箱客户端，如果你用的是QQ邮箱，可以在微信里设置邮件提醒，是最快捷的提醒。</li>
<li>Finish! Enjoy~!</li>
</ol>
<h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>为了防止被一些网站服务器识别为恶意发送导致屏蔽帐号，在email发送功能上做了限制，每隔5分钟才可以发送一份邮件，所以有时候温度上来了可能你没有立刻收到警报，是由于这个原因。</p>
<p>每隔1天无论是否报警都会发送一个包含当前温湿度数据的Daily Info，这个的作用是为了确认这个监控设备运作正常。</p>
]]></content>
      <tags>
        <tag>创客</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>朋友圈的月亮怎么那么大？</title>
    <url>/2016/11/14/2016-11-14-%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%9A%84%E6%9C%88%E4%BA%AE%E6%80%8E%E4%B9%88%E9%82%A3%E4%B9%88%E5%A4%A7%EF%BC%9F/</url>
    <content><![CDATA[<p>今天是传说中一年一度的最大月亮夜，不知多少人被朋友圈的最大月亮刷屏，朋友圈里的月亮是这样的：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/1.webp" alt="图片"></p>
<p>这样的：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/2.webp" alt="图片"></p>
<p>以及这样的：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/3.webp" alt="图片"></p>
<p>而你把手机放大到最大，看见的月亮也不过是这样的：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/4.jpg" alt="图片"></p>
<p>为什么我看到的超级月亮和朋友圈的画风不一样！？</p>
<p>其实，超级月亮是大，然而大的并不是很明显。一般最大也就比平时大个10%多一点，这是什么概念呢？110斤就比100斤大个10%，你觉得看起来变化大么？</p>
<p>其实超级月亮造成的月亮视觉大小变化，还不如有时候大气折射等原因导致的月亮可视大小变化来的大。</p>
<p>那朋友圈那一堆大月亮是怎么回事呢？</p>
<p>嗯，这是摄影圈最会玩的一招，叫“长焦大炮打月亮”。什么意思呢？就是用长焦的镜头（可用理解成望远镜），拍摄月亮和远方的物体，由于远方物体离你很远，看起来很小，月亮离你很远，看起来也很小。但是一旦通过望远镜，把镜头里只放下月亮和远方的物体时，一对比，哇，月亮就好大了！</p>
<p>不太明白的话可以看下面这两张图。晚上太晚懒得拍照，我从网上找了张图过来演示下：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/5.webp" alt="图片"></p>
<p>虽然有点糊，月亮很大吧？看看实际情况：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/6.webp" alt="图片"></p>
<p>这就是长焦的玩法了。当然我这边是以数码拉伸的方法来演示的，实际用长焦出来的效果好得多。再演示一个给大家看看，大月亮：  </p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/7.webp" alt="图片"></p>
<p>实际情况：</p>
<p><img src="/assets/2016-%E8%B6%85%E7%BA%A7%E6%9C%88%E4%BA%AE/8.webp" alt="图片"></p>
<p>以上就是每年遇到超级月亮时，媒体上、朋友圈里那么多大月亮的真实来历啦~</p>
<p>当然其实也不排除有些大月亮是纯粹PS的。</p>
<p>如果你真的想看大月亮呢，可以试试看去坐邮轮出海，海上升月时，可能由于大气折射等原因，产生超大的月亮~</p>
]]></content>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Windows VHD系统</title>
    <url>/2017/12/17/2017-12-17-%E7%8E%A9%E8%BD%ACWindows-VHD%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>从Windows 7开始，微软就出了一个新东西，叫做VHD。这是什么东西呢？如果你用过VMware等虚拟机，应该接触过虚拟磁盘，在VMware下是vmdk，而VHD就是微软自家的虚拟磁盘格式。</p>
<p>可能你会问了，虚拟磁盘是啥？和还原卡什么关系？为什么可以用VHD做还原系统？</p>
<p>别急，我们一个个来解释。</p>
<p>虚拟磁盘顾名思义，是一个虚拟出来的磁盘。我们知道现实中的磁盘是一个硬件，接上主板后可以在系统里被识别。而虚拟磁盘其实是存在于物理磁盘中的一个文件，这个文件被操作系统或其它软件挂载后，会被系统当作一块物理磁盘一样对待。</p>
<p>在Windows 7以上的系统中，<strong>右键 我的电脑（Win7） <strong>或 <strong>右键左下角的开始菜单（Win8以上）</strong> - <strong>管理（或者是计算机管理）</strong>，在左侧先</strong>左键点击磁盘管理</strong>，等待右侧显示出磁盘信息时，再<strong>右键磁盘管理</strong>，选择创建VHD，接下去根据提示完成创建即可。大小推荐70G，并选择动态扩展。这个创建好的VHD我为其命名为base.vhd，接下去提到的base.vhd都是指这个。读者可以根据自己的需要随意改名成其它名字。</p>
<p>一般创建完的VHD会自动挂载，如果没有挂载，需要自己去双击那个VHD文件来挂载。刚挂载的VHD如同一个全新的硬盘，会要求你选择MBR或GPT，并格式化。为了兼容老系统，这里可以选择MBR，并格式化一个分区。</p>
<p>以上这些做完以后，你就有了一个有70G分区的虚拟硬盘。那么，这个可以拿来做什么呢？和还原系统有什么关系呢？</p>
<p>在这里就要介绍另外一个VHD的特性，叫做差分系统。什么意思呢？VHD虚拟磁盘创建除了建立一个全新的空磁盘，还可以继承一个现有的VHD来创建一个子VHD。该子VHD内映射了父VHD里的所有数据，并且在子VHD内的所有操作只会在子VHD内产生变化，而不会影响父VHD的内容。很多熟悉VMware的人看到这里应该也就明白了，这就是VMware等虚拟机里类似“快照”的功能。而我们的还原功能，也是通过这个差分系统来完成。</p>
<p>首先我们将所需要安装的系统，装在最早创建的base.vhd里。安装的方法有很多，我建议采取官方的方法，去微软官网下载Windows AIK，在AIK里有ImageX.exe的一个程序，可以用来提取Windows安装镜像中的内容直接释放到指定目录下。如果嫌麻烦也可以网上直接找下ImageX.exe的下载。也有很多第三方可以实现类似的功能，比如GHOST之类的，但是不是太建议使用。</p>
<p>有了Imagex以后，可以先将系统ISO挂载，或者如果是光盘的话先将光盘塞入光驱。之后打开，看看sources文件夹下是不是有一个非常大的install.wim文件。之后在命令提示符里输入</p>
<p>*<em>imagex &#x2F;apply X:\sources\install.wim 1 V:*</em></p>
<p>其中X换成ISO加载后的盘符，V换成VHD加载后的盘符。之后就会将系统提取到VHD的盘符内。</p>
<p>之后用AIK里的bcdboot工具添加该vhd的windows引导，命令格式为：</p>
<p><strong>bcdboot V:\windows &#x2F;l zh-cn &#x2F;s C:</strong></p>
<p>其中V换成VHD加载后的盘符，C:换成当前硬盘引导所在扇区，一半默认是C盘。完成后重启，可以出现这个新的vhd的安装引导，进入就是一个全新的系统。</p>
<p>在这个新系统中安装好自己想用的各种软件，完成设置。之后重启，进入PE系统（或者其它第三方系统），使用命令创建基于base.vhd的子VHD（有些PE自带一些VHD工具，也可以用这类创建）</p>
<p><strong>create vdisk file&#x3D;D:\run.vhd parent&#x3D;D:\base.vhd</strong></p>
<p>此处D:\base.vhd换成你自己base.vhd保存的路径，run.vhd也可以自定义路径，就是不要放到挂载在VHD的分区里即可。</p>
<p>命令运行后，请千万千万不要再打开base.vhd，不要挂载base.vhd，否则会导致run.vhd出错。</p>
<p>现在双击run.vhd文件，会自动挂载，进入后一看会发现和base.vhd里的文件一模一样，这个就是子VHD的特性，完整继承了base.vhd内的数据，但时又不占用过大空间。</p>
<p>接下去我们用bcdboot工具将run.vhd添加到启动项，将原来的base.vhd的系统启动项删除（因为base.vhd现在作为父vhd，已经不可用再进行任何修改，否则run.vhd就会出错）。删除和添加的步骤如下：</p>
<p>首先在CMD运行 bcdedit，会显示当前的启动项信息，此时记住vhd启动项的标识符，就是{current}或者{f8735235-b343-11e5-8124-a1b7d9a6efeb}这类的值。</p>
<p>之后运行 bcdedit &#x2F;delete {标识符} 删除该启动项，注意把{标识符}替换成上面记录的值，如：{current}</p>
<p>接下去用bcdboot添加启动项（和之前添加的方法一样）：</p>
<p><strong>bcdboot V:\windows &#x2F;l zh-cn &#x2F;s C:</strong></p>
<p>其中 V:\改为run.vhd挂载后的分区。</p>
<p>之后再重启，选择run.vhd的启动项进入系统，即为进入了还原系统。如果某天你想还原该系统到base.vhd的情况，只要进入PE，将run.vhd删除并重新建立一个run.vhd的base.vhd子vhd即可。</p>
<p>当然以上手法显得不够自动化，如果我们需要系统在每次重启的时候都做出如上所述的还原效果，需要再添加个第三方系统来完成一些自动操作，尝试用linux成功，由于篇幅限制不展开讲述。</p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>VHD</tag>
        <tag>Windows</tag>
        <tag>虚拟机</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>有云的星轨，怎么拍？</title>
    <url>/2017/12/17/2017-12-17-%E6%9C%89%E4%BA%91%E7%9A%84%E6%98%9F%E8%BD%A8%EF%BC%8C%E6%80%8E%E4%B9%88%E6%8B%8D%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/td5ib5QfaldaOmQ7XYib4ibnfGkgk96vUzxvsyFbfkFicbRg6nvcYLEmDVHVmLnF9l64AqdB5X4cM8M3qphXqAGBmg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1" alt="img"></p>
<p>当你满怀憧憬的打开晚上拍的延时，看到漫天云朵，瞬间心都凉了一下，这要怎么做星轨？</p>
<p>传统的做星轨的方法都是将照片直接叠加，遇到像如图所示的云朵飘着的延时就没有办法了。</p>
<p>用photoshop将星星都提取出来叠加？比较困难，工作量很大而且很难做到统一。</p>
<p>可以用python！用PIL、numpy、scipy几个库，将图片逐一打开，提取亮度高于某个值的像素，加到下一张图片中，再在下一张图片中反复此操作，直至最后一张。</p>
<p>处理完之后的视频如下：</p>
<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=c0334bfj9f7&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>
<p>源代码在此：<a href="https://github.com/scaldstack/make_star_track_from_cloud/blob/release/make_star_track_from_cloud.py">https://github.com/scaldstack/make_star_track_from_cloud/blob/release/make_star_track_from_cloud.py</a></p>
<p>Enjoy～</p>
]]></content>
      <tags>
        <tag>摄影</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>B站视频测试</title>
    <url>/2018/12/27/2018-12-27-B%E7%AB%99%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>自己做的一个Python入门教学项目：</p>

<iframe src="//player.bilibili.com/player.html?aid=31633039&cid=55315882&page=1" width="100%" height="480" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>


<p><del>试试看 hexo-tag-bilibili 这个Hexo插件好不好用。</del><br>看来这个hexo的插件很久没更新了，不好用。<br>换raw格式的 html来写了</p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>Python</tag>
        <tag>视频</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE ipv6 设置</title>
    <url>/2022/04/07/2022-04-07-PVE-ipv6%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>安装时如果设定PVE的ip为ipv4，那么默认情况下PVE是不会获取到公网的ipv6的（至少7.1-12版本为止不会）。需要修改下<code>/etc/sysctl.conf</code>，在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.ipv6.conf.all.accept_ra=2</span><br><span class="line">net.ipv6.conf.default.accept_ra=2</span><br><span class="line">net.ipv6.conf.vmbr0.accept_ra=2</span><br><span class="line">net.ipv6.conf.all.autoconf=1</span><br><span class="line">net.ipv6.conf.default.autoconf=1</span><br><span class="line">net.ipv6.conf.vmbr0.autoconf=1</span><br></pre></td></tr></table></figure>

<p>然后重启即可。</p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>虚拟机</tag>
        <tag>pve</tag>
        <tag>ipv6</tag>
      </tags>
  </entry>
  <entry>
    <title>「三分钟编程」Python从0到精通「01」</title>
    <url>/2021/06/29/2021-06-29-%E3%80%8C%E4%B8%89%E5%88%86%E9%92%9F%E7%BC%96%E7%A8%8B%E3%80%8DPython%E4%BB%8E0%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8C01%E3%80%8D/</url>
    <content><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=248936867&bvid=BV1av411H7jn&cid=361419653&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>视频</tag>
        <tag>教程</tag>
        <tag>Bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Python的图片存储原理展示小工具</title>
    <url>/2021/06/07/2021-06-07-%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86%E5%B1%95%E7%A4%BA%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>关于图像存储原理和图像存储容量计算，其实是一个不太难的知识点，但还是会遇到较多同学由于缺少具体的操作反馈偶尔会迷糊的情况，所以特意做了这个展示小工具，可以配合课程使用。</p>
<h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><p><img src="/assets/pydao/npdraw.gif"></p>
<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/RainGather/pydao/blob/master/2-%E5%9B%BE%E5%83%8F%E7%BC%96%E7%A0%81/npdraw_mixed.py">pydao&#x2F;npdraw_mixed.py at master · RainGather&#x2F;pydao (github.com)</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>教学工具</tag>
      </tags>
  </entry>
  <entry>
    <title>pve硬盘直通</title>
    <url>/2022/04/10/pve%E7%A1%AC%E7%9B%98%E7%9B%B4%E9%80%9A/</url>
    <content><![CDATA[<p>使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qm set &lt;vm_id&gt; –&lt;disk_type&gt;[n] /dev/disk/by-id/&lt;type&gt;-$brand-$model_$serial_number</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qm set 100 –sata0 /dev/disk/by-id/wwn-0x3000c500a2533abe</span><br></pre></td></tr></table></figure>

<p>其中100是虚拟机id号</p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>pve</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用turtle画树</title>
    <url>/2022/04/19/python-turtle-draw-tree/</url>
    <content><![CDATA[<p>这两天在整理存储数据，翻出来一些老东西，有个以前网上找来的代码（不知道哪里拿来的忘记了），可以用python的turtle库画樱花，还挺好看的，用的是递归，在这里记录下：</p>
<p><img src="/assets/python-turtle-draw-tree.assets/tree.png" alt="tree"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">w = turtle.Screen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">branchLen, t</span>):</span><br><span class="line">    <span class="keyword">if</span> branchLen &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">8</span> &lt;= branchLen &lt;= <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;snow&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;lightcoral&#x27;</span>)</span><br><span class="line">            t.pensize(branchLen / <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> branchLen &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;snow&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t.color(<span class="string">&#x27;lightcoral&#x27;</span>)</span><br><span class="line">            t.pensize(branchLen / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t.color(<span class="string">&#x27;sienna&#x27;</span>)</span><br><span class="line">            t.pensize(branchLen / <span class="number">10</span>)</span><br><span class="line">        t.forward(branchLen)</span><br><span class="line">        a = <span class="number">1.5</span> * random.random()</span><br><span class="line">        t.right(<span class="number">20</span>*a)</span><br><span class="line">        b = <span class="number">1.5</span> * random.random()</span><br><span class="line">        tree(branchLen-<span class="number">10</span>*b, t)</span><br><span class="line">        t.left(<span class="number">40</span>*a)</span><br><span class="line">        tree(branchLen-<span class="number">10</span>*b, t)</span><br><span class="line">        t.right(<span class="number">20</span>*a)</span><br><span class="line">        t.up()</span><br><span class="line">        t.backward(branchLen)</span><br><span class="line">        t.down()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">petal</span>(<span class="params">m, t</span>):  <span class="comment"># 树下花瓣</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        a = <span class="number">200</span> - <span class="number">400</span> * random.random()</span><br><span class="line">        b = <span class="number">10</span> - <span class="number">20</span> * random.random()</span><br><span class="line">        t.up()</span><br><span class="line">        t.forward(b)</span><br><span class="line">        t.left(<span class="number">90</span>)</span><br><span class="line">        t.forward(a)</span><br><span class="line">        t.down()</span><br><span class="line">        t.color(<span class="string">&quot;lightcoral&quot;</span>)</span><br><span class="line">        t.circle(<span class="number">1</span>)</span><br><span class="line">        t.up()</span><br><span class="line">        t.backward(a)</span><br><span class="line">        t.right(<span class="number">90</span>)</span><br><span class="line">        t.backward(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    myWin = turtle.Screen()</span><br><span class="line">    getscreen().tracer(<span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">    turtle.screensize(bg=<span class="string">&#x27;wheat&#x27;</span>)</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">    t.up()</span><br><span class="line">    t.backward(<span class="number">150</span>)</span><br><span class="line">    t.down()</span><br><span class="line">    t.color(<span class="string">&#x27;sienna&#x27;</span>)</span><br><span class="line">    tree(<span class="number">60</span>, t)</span><br><span class="line">    petal(<span class="number">100</span>, t)</span><br><span class="line">    myWin.exitonclick()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有个我自己那个时候以类的形式改写到一半的代码，估计之后也懒得改写了，也写一下权当记录吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span>, pos=(<span class="params"><span class="number">0</span>, -<span class="number">200</span></span>), direction=<span class="number">90</span>, level=<span class="number">0</span></span>):</span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.child = []</span><br><span class="line">        self.child_i = <span class="number">0</span></span><br><span class="line">        self.level = level</span><br><span class="line">        self.branch_width = <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">5</span> - self.level)</span><br><span class="line">        self.x, self.y = pos</span><br><span class="line">        self.direction = direction</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_child</span>(<span class="params">self</span>):</span><br><span class="line">        self.child_i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.child_i &gt;= <span class="built_in">len</span>(self.child):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.child[self.child_i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>():</span><br><span class="line">    node = Node()</span><br><span class="line">    turtle.up()</span><br><span class="line">    turtle.setpos(node.x, node.y)</span><br><span class="line">    turtle.setheading(node.direction)</span><br><span class="line">    turtle.color(<span class="string">&#x27;sienna&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(random.randint(<span class="number">2</span>, <span class="number">5</span>)):</span><br><span class="line">            direction = random.randint(-<span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">            long = random.randint(<span class="number">25</span>, <span class="number">100</span>)</span><br><span class="line">            turtle.setpos(node.x, node.y)</span><br><span class="line">            turtle.setheading(node.direction)</span><br><span class="line">            turtle.left(direction)</span><br><span class="line">            turtle.pensize(node.branch_width)</span><br><span class="line">            turtle.down()</span><br><span class="line">            turtle.forward(long)</span><br><span class="line">            turtle.up()</span><br><span class="line">            child =  Node(node, turtle.pos(), turtle.heading(), node.level + <span class="number">1</span>)</span><br><span class="line">            node.child.append(child)</span><br><span class="line">        next_child = node.next_child()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> next_child <span class="keyword">or</span> node.level &gt; random.randint(<span class="number">2</span>, <span class="number">5</span>):</span><br><span class="line">            node = node.parent</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            next_child = node.next_child()</span><br><span class="line">        node = next_child</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.tracer(<span class="number">0</span>)</span><br><span class="line">turtle.hideturtle()</span><br><span class="line">draw()</span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>turtle</tag>
        <tag>迭代器</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>纯shell版本的aliyun-ipv6-ddns</title>
    <url>/2022/04/07/2022-04-07-%E7%BA%AFshell%E7%89%88%E6%9C%AC%E7%9A%84aliyun-ipv6-ddns/</url>
    <content><![CDATA[<p>aliyun有很多ddns的版本，基本都需要一些环境依赖，网上找到了个大佬：<a href="https://rousongs.com/1293.html">肉松的站</a>写的纯shell版本，只需要curl就能用。</p>
<p>我下面的代码中，相比原版稍微修改了两行，修了个小bug：</p>
<blockquote>
<p> ipv6 有可能会获取到标识为deprecated的地址，意为这个地址被弃用了，原始版本会有一定概率误用这个弃用地址作为ddns，这样就出问题了，我在下面的版本中把这个bug给修了</p>
</blockquote>
<p>直接下载地址：<a href="https://raw.githubusercontent.com/RainGather/aliyun-ipv6-ddns-shell/main/aliyun-ipv6-ddns.sh">aliyun-ipv6-ddns.sh</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aliddnsipv6_ak=&quot;阿里AccessKey ID&quot;</span><br><span class="line">aliddnsipv6_sk=&quot;阿里Access Key Secret&quot;</span><br><span class="line">aliddnsipv6_name1=&#x27;二级域名前缀，比如使用nas.rousongs.com，此处填写nas&#x27;</span><br><span class="line">aliddnsipv6_domain=&#x27;主域名，此处填写rousongs.com&#x27;</span><br><span class="line">aliddnsipv6_ttl=&quot;600&quot;</span><br><span class="line">netname=&quot;eth0&quot;  # 如果网卡不是eth0就修改成对应的网卡名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上是配置，只要填上面的配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-----------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下的是代码，全都不要改</span></span><br><span class="line"></span><br><span class="line">if [ &quot;$aliddnsipv6_name1&quot; = &quot;@&quot; ]</span><br><span class="line">then</span><br><span class="line">  aliddnsipv6_name=$aliddnsipv6_domain</span><br><span class="line">else</span><br><span class="line">  aliddnsipv6_name=$aliddnsipv6_name1.$aliddnsipv6_domain</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">now=`date`</span><br><span class="line"></span><br><span class="line">die () &#123;</span><br><span class="line">    echo $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipv6s=`ip addr show $netname | grep &quot;inet6.*global&quot; | grep -v &quot;deprecated&quot; | awk &#x27;&#123;print $2&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123;print $1&#125;&#x27;` || die &quot;$ipv6&quot;</span><br><span class="line"></span><br><span class="line">for ipv6 in $ipv6s</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">ipv6 = <span class="variable">$ipv6</span></span></span><br><span class="line">  break</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $ipv6</span><br><span class="line"></span><br><span class="line">current_ipv6=`nslookup -query=AAAA $aliddnsipv6_name 2&gt;&amp;1`</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$current_ipv6</span></span></span><br><span class="line"></span><br><span class="line">current_ipv6=`echo &quot;$current_ipv6&quot; | grep &#x27;Address: &#x27; | tail -n1 | awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">echo $current_ipv6</span><br><span class="line"></span><br><span class="line">if [ &quot;$?&quot; -eq &quot;0&quot; ]</span><br><span class="line">then</span><br><span class="line">    current_ipv6=`echo &quot;$current_ipv6&quot; | grep &#x27;Address: &#x27; | tail -n1 | awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    echo $current_ipv6</span><br><span class="line"></span><br><span class="line">    if [ &quot;$ipv6&quot; = &quot;$current_ipv6&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;skipping&quot;</span><br><span class="line">    fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fix when A record removed by manual dns is always update error</span></span><br><span class="line">else</span><br><span class="line">    unset aliddnsipv6_record_id</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timestamp=`date -u &quot;+%Y-%m-%dT%H%%3A%M%%3A%SZ&quot;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    # urlencode &lt;string&gt;</span><br><span class="line">    out=&quot;&quot;</span><br><span class="line">    while read -n1 c</span><br><span class="line">    do</span><br><span class="line">        case $c in</span><br><span class="line">            [a-zA-Z0-9._-]) out=&quot;$out$c&quot; ;;</span><br><span class="line">            *) out=&quot;$out`printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;`&quot; ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">    echo -n $out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enc() &#123;</span><br><span class="line">    echo -n &quot;$1&quot; | urlencode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send_request() &#123;</span><br><span class="line">    local args=&quot;AccessKeyId=$aliddnsipv6_ak&amp;Action=$1&amp;Format=json&amp;$2&amp;Version=2015-01-09&quot;</span><br><span class="line">    local hash=$(echo -n &quot;GET&amp;%2F&amp;$(enc &quot;$args&quot;)&quot; | openssl dgst -sha1 -hmac &quot;$aliddnsipv6_sk&amp;&quot; -binary | openssl base64)</span><br><span class="line">    curl -s &quot;http://alidns.aliyuncs.com/?$args&amp;Signature=$(enc &quot;$hash&quot;)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_recordid() &#123;</span><br><span class="line">    grep -Eo &#x27;&quot;RecordId&quot;:&quot;[0-9]+&quot;&#x27; | cut -d&#x27;:&#x27; -f2 | tr -d &#x27;&quot;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query_recordid() &#123;</span><br><span class="line">    send_request &quot;DescribeSubDomainRecords&quot; &quot;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;SubDomain=$aliddnsipv6_name&amp;Timestamp=$timestamp&amp;Type=AAAA&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update_record() &#123;</span><br><span class="line">    send_request &quot;UpdateDomainRecord&quot; &quot;RR=$aliddnsipv6_name1&amp;RecordId=$1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$aliddnsipv6_ttl&amp;Timestamp=$timestamp&amp;Type=AAAA&amp;Value=$(enc $ipv6)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add_record() &#123;</span><br><span class="line">    send_request &quot;AddDomainRecord&amp;DomainName=$aliddnsipv6_domain&quot; &quot;RR=$aliddnsipv6_name1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$aliddnsipv6_ttl&amp;Timestamp=$timestamp&amp;Type=AAAA&amp;Value=$(enc $ipv6)&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">add support */%2A and @/%40 record</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ &quot;$aliddnsipv6_record_id&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">    aliddnsipv6_record_id=`query_recordid | get_recordid`</span><br><span class="line">    #echo &#x27;-----------------&#x27; $aliddnsipv6_record_id</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$aliddnsipv6_record_id&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">    aliddnsipv6_record_id=`add_record | get_recordid`</span><br><span class="line">    echo &quot;added record $aliddnsipv6_record_id&quot;</span><br><span class="line">else</span><br><span class="line">    update_record $aliddnsipv6_record_id</span><br><span class="line">    echo &quot;updated record $aliddnsipv6_record_id&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>运维</tag>
        <tag>ipv6</tag>
        <tag>ddns</tag>
        <tag>aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>带全局搜索的filerun搭建</title>
    <url>/2022/04/10/%E5%B8%A6%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E7%9A%84filerun%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>filerun是国外的一款网盘程序。基于php，可以用docker来安装。</p>
<p>filerun预制了与elasticsearch的接口，可以很方便的使用elasticsearch配合tika来作为全局搜索。</p>
<p>elasticsearch是一款开源搜索引擎，而tika是一款通用的开源内容分析工具，简而言之，可以理解为tika把类似图片、pdf、word等不同格式的文件内的内容提取出来，然后让elasticsearch进行索引并提供搜索服务。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1-docker-compose-yml"><a href="#1-docker-compose-yml" class="headerlink" title="1. docker-compose.yml"></a>1. docker-compose.yml</h2><p>新建一个filerun的文件夹，在里面新建<code>docker-compose.yml</code>文本文件，文件内容为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    container_name: filerun_db</span><br><span class="line">    image: mariadb:<span class="number">10.1</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: filerun</span><br><span class="line">      MYSQL_USER: filerun</span><br><span class="line">      MYSQL_PASSWORD: filerun</span><br><span class="line">      MYSQL_DATABASE: filerun_db</span><br><span class="line">    volumes:</span><br><span class="line">      - ./db:/var/lib/mysql</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    container_name: filerun_web</span><br><span class="line">    image: filerun/filerun</span><br><span class="line">    environment:</span><br><span class="line">      FR_DB_HOST: db</span><br><span class="line">      FR_DB_PORT: <span class="number">3306</span></span><br><span class="line">      FR_DB_NAME: filerun_db</span><br><span class="line">      FR_DB_USER: filerun</span><br><span class="line">      FR_DB_PASS: filerun</span><br><span class="line">      APACHE_RUN_USER: www-data</span><br><span class="line">      APACHE_RUN_USER_ID: <span class="number">1000</span></span><br><span class="line">      APACHE_RUN_GROUP: www-data</span><br><span class="line">      APACHE_RUN_GROUP_ID: <span class="number">1000</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">      - tika</span><br><span class="line">      - elasticsearch</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./html:/var/www/html</span><br><span class="line">      - [path/to/file/root]:/<span class="keyword">user</span>-files</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line">  tika:</span><br><span class="line">    container_name: filerun_tika</span><br><span class="line">    image: logicalspark/docker-tikaserver</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line">  elasticsearch:</span><br><span class="line">    container_name: filerun_esearch</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:<span class="number">6.2</span>.<span class="number">4</span></span><br><span class="line">    environment:</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -<span class="number">1</span></span><br><span class="line">        hard: -<span class="number">1</span></span><br><span class="line">    mem_limit: <span class="number">1</span>g</span><br><span class="line">    volumes:</span><br><span class="line">      - ./esearch:/usr/share/elasticsearch/data</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果没有其它情况，上述只需要修改<code>[path/to/file/root]</code>为你自己的文件存放根目录路径即可。</p>
<h2 id="2-安装脚本"><a href="#2-安装脚本" class="headerlink" title="2.安装脚本"></a><span id="install_script">2.安装脚本</span></h2><p>可以在文件夹内新建一个install.sh的文件，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果原来有安装filerun的docker就先全部停掉删掉</span></span><br><span class="line">sudo docker container stop filerun_web filerun_db filerun_esearch filerun_tika 2&gt;/dev/null</span><br><span class="line">sudo docker container rm filerun_web filerun_db filerun_esearch filerun_tika 2&gt;/dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改原来目录的权限</span></span><br><span class="line">[ -d ./html ] &amp;&amp; sudo chown -R 1000:1000 ./html</span><br><span class="line">[ -d ./esearch ] &amp;&amp; sudo chown -R 1000:1000 ./esearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署docker</span></span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加elasticsearch的crontab</span></span><br><span class="line">sudo docker exec -it filerun_web bash -c &#x27;(crontab -l 2&gt;/dev/null; echo &quot;* * * * * php /var/www/html/cron/process_search_index_queue.php&quot;) | crontab -&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改filerun_Web的www-data的uid、gid为1000</span></span><br><span class="line">sudo docker exec -it filerun_web bash -c &#x27;usermod -u 1000 www-data&#x27;</span><br><span class="line">sudo docker exec -it filerun_web bash -c &#x27;groupmod -g 1000 www-data&#x27;</span><br><span class="line">sudo docker restart filerun_web</span><br></pre></td></tr></table></figure>

<p>运行上述脚本进行安装和部署。安装后如果登录时没有提示新建管理用户，那么默认管理员用户账号和密码一样，都是<code>superuser</code></p>
<h2 id="3-进行设置"><a href="#3-进行设置" class="headerlink" title="3. 进行设置"></a>3. 进行设置</h2><p>进入到<code>Control panel</code> -&gt; <code>Files</code> -&gt; <code>Searching</code></p>
<p>勾选<code>Enable content indexing for text documents</code>，将<code>Elasticsearch</code>设置为<code>http://elasticsearch:9200</code>，点击<code>test server</code>，应该一切正常。如果提示有问题，等待个几分钟再试，刚刚部署完时elasticsearch启动初始化需要时间。强调下这里注意url不要填<code>filerun_esearch</code>，因为<code>docker-compose.yml</code>里设置的links是<code>elasticsearch</code>。</p>
<p>在<code>Apache Tika </code>里，设置<code>Apache Tika server hostname</code>为<code>tika</code>，<code>Port number</code>设为9998，勾选<code>OCR PDF files</code>，点击<code>test server</code>，按流程下来应该一切正常。</p>
<h2 id="4-开机自启动的设置"><a href="#4-开机自启动的设置" class="headerlink" title="4. 开机自启动的设置"></a>4. 开机自启动的设置</h2><p>由于这个版本里所有docker设置的都是<code>restart: no</code>，所以需要手工自启动。例如root用户通过<code>crontab -e</code>设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@reboot mount some disk, net storage and so on...</span></span><br><span class="line">@reboot docker start filerun_web filerun_db filerun_esearch filerun_tika</span><br></pre></td></tr></table></figure>



<h1 id="与官方版本的区别"><a href="#与官方版本的区别" class="headerlink" title="与官方版本的区别"></a>与官方版本的区别</h1><p>相对于官方的版本，我这边做了一些修改，其中主要有以下几个：</p>
<h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>因为部分服务器可能涉及iSCSI挂载等情况，所以我将所有的<code>restart</code>都设置为了<code>no</code>，可以自己写脚本实现重启后的自动运行。</p>
<h4 id="容器名字"><a href="#容器名字" class="headerlink" title="容器名字"></a>容器名字</h4><p>全部设置了圈容器名字方便后续处理</p>
<h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><p>因为一般的服务器大部分的主用户uid都是1000，而filerun_web的docker内默认用的是www-data，uid是33。</p>
<p>如果按照默认的情况走，最后用户数据根目录都会出现权限冲突，部分通过filerun修改的会变成uid33的文件，有些uid1000的文件可能filerun也读取、修改不了。为此通过将www-data的uid、gid都设到1000来避免出现此类问题。</p>
<p>但是由于某些我个人还没确定的原因，似乎有的时候即便如上述设置，docker跑起来了www-data还是uid33，为此在<a href="#install_script">安装脚本</a>里有在docker布置完后统一进行设置。</p>
<h4 id="全局索引"><a href="#全局索引" class="headerlink" title="全局索引"></a>全局索引</h4><p>根据官方的文档，elasticsearch默认好像不会自动索引，为此需要手工添加一个crontab。具体的执行命令都写在了<a href="#install_script">安装脚本</a>中。</p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>pve</tag>
        <tag>nas</tag>
        <tag>docker</tag>
        <tag>搜索</tag>
        <tag>filerun</tag>
      </tags>
  </entry>
  <entry>
    <title>tailscale局域网访问节点</title>
    <url>/2022/04/26/tailscale%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>tailscale除了异地组网，还可以提供内网访问节点(Subnet routers and traffic relay nodes)的功能，类似国内的蒲公英设备。</p>
<p>目前好像仅供Linux主机使用，方法比较简单，首先开启安装了tailscale的Linux的转发：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;net.ipv4.ip_forward = 1&#x27; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">echo &#x27;net.ipv6.conf.all.forwarding = 1&#x27; | sudo tee -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>然后运行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tailscale up --advertise-routes=192.168.0.0/24,10.65.1.0/24</span><br></pre></td></tr></table></figure>

<p>这样就将<code>192.168.0.*</code>和<code>10.65.1.*</code>作为了subnet。</p>
<p>不过要使其起作用还需要在tailscale的控制页面上对应机器的<code>Edit route setting</code>启用subnet，并且启用<code>Disable key expiry</code>，防止key到期后比较麻烦。</p>
<p>当其他地方访问时，需要启用接受局域网：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tailscale up --accept-routes</span><br></pre></td></tr></table></figure>

<p>之后访问这些局域网ip时会被转到这个节点所在的局域网访问。</p>
<blockquote>
<p> <a href="https://tailscale.com/kb/1019/subnets/">官网Subnet配置相关文档</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>内网穿透</tag>
        <tag>tailscale</tag>
        <tag>zerotier</tag>
        <tag>WireGuard</tag>
        <tag>异地组网</tag>
      </tags>
  </entry>
  <entry>
    <title>万词王wantwords反向词典</title>
    <url>/2022/05/09/20220509-221527-%E4%B8%87%E8%AF%8D%E7%8E%8Bwantwords%E5%8F%8D%E5%90%91%E8%AF%8D%E5%85%B8/</url>
    <content><![CDATA[<p>有时候我们会想用某个词，但是只记得其意思，却回想不起来这个词是啥，这个时候就可以用反向词典，用词的含义反查这个词。<a href="https://wantwords.net/">WantWords 反向词典</a>是做的比较好的反向词典，包括中文反查和英文反查，直接在页面里输入想用词汇的意思描述，就会有推荐词汇出来。有时候按下搜索不会马上出来，会慢一些，猜测可能在后台推理计算吧。</p>
<p>另外，这东西有时候还能拿来起变量名用，挺不错的。</p>
<p><a href="https://github.com/thunlp/WantWords">Github地址</a></p>
]]></content>
      <tags>
        <tag>网站</tag>
        <tag>人工智能</tag>
        <tag>应用</tag>
        <tag>app</tag>
        <tag>反向词典</tag>
        <tag>网页收藏夹</tag>
      </tags>
  </entry>
  <entry>
    <title>一个模拟电路网站</title>
    <url>/2022/05/09/20220509-222506-%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>通用选考部分需要电子电路的模拟时，可以参考这个项目: <a href="https://www.falstad.com/circuit/">falstad electronic circuit simulator</a>，<a href="https://www.falstad.com/circuit/circuitjs.html">全屏版</a>，目前已自带中文，如果因为网络原因加载不便，也可以下载其<a href="https://www.falstad.com/circuit/offline/">离线包</a>使用。</p>
]]></content>
      <tags>
        <tag>网站</tag>
        <tag>网页收藏夹</tag>
        <tag>网页</tag>
        <tag>电子电路</tag>
      </tags>
  </entry>
  <entry>
    <title>vim排序、删除特定行等高级用法</title>
    <url>/2022/04/13/20220413-205108-vim%E6%8E%92%E5%BA%8F%E3%80%81%E5%88%A0%E9%99%A4%E7%89%B9%E5%AE%9A%E8%A1%8C%E7%AD%89%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>vim很高深，最近学了几个排序和删除特定行的用法，来做个记录。</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f6c9532e1f4b66be96f0f56bd7c3a3c1997ea8066b91bfcc984e41f072c347ba::C:\Windows\System32\cmd.exe</span><br><span class="line">200b49c11437c344b2cd62f02a5357b2638be7514bd04b3ded797e097912c912::D:\pic.jpg</span><br></pre></td></tr></table></figure>

<h2 id="删除特定行"><a href="#删除特定行" class="headerlink" title="删除特定行"></a>删除特定行</h2><p>如果想删除Windows系统目录下的行，可以使用<code>:g/::C:\\Windows\\System32/d</code>，其中g代表全局搜索，后续跟着的是正则表达式，注意因为转义的原因，其中的斜杠要写成<code>\/</code>，反斜杠要写成<code>\\</code>。</p>
<h2 id="特殊规则排序"><a href="#特殊规则排序" class="headerlink" title="特殊规则排序"></a>特殊规则排序</h2><p>如果想根据路径进行排序，可以使用<code>:sort r /::.\+$/</code>，还是一样的逻辑，其中<code>r</code>代表根据正则表达式内的结果排序，不加<code>r</code>的话忽略正则表达式内的结果后排序，正则表达式必须用两个斜杠包裹，其中<code>::</code>直接代表<code>::</code>字符，<code>.</code>代表任意字符，<code>\+</code>以为着出现1到n次前一个字符，在这里<code>+</code>由于有特殊作用需要用反斜杠来转义。<code>$</code>意味这到最末尾。</p>
<p>合在一起就是：每行选取符合::开头（但不是最后的::）到末尾的字符串，以这些字符串作为依据对每行进行排序。</p>
<hr>
<p>更多vim手册和帮助可以查看<a href="https://yianwillis.github.io/vimcdoc/doc/">VIM 中文帮助: 以字母顺序排列的命令索引 (yianwillis.github.io)</a></p>
]]></content>
      <tags>
        <tag>vim</tag>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
</search>
